DAG模型难点在于如何构图
存在问题：
1.可不可以用非递归来实现？
//Uva437
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int MAX_N=1000;
int n,t,ans;
int d[MAX_N][3];
int dp[MAX_N][3];
int G[40][3][40][3];
int swap1(int& a,int& b){ a=a+b;b=a-b; a=a-b; };
int  DAGdp(int i,int k){
    int& cnt =dp[i][k];
    if(cnt>0)
        return cnt;
    cnt=d[i][k];
    for(int j=0;j<n;j++){
        for(int a=0;a<3;a++){
            if(G[i][k][j][a]==1){
                cnt=max(cnt,DAGdp(j,a)+d[i][k]);
            }
        }
    }
    return cnt;
}
int main(){
    while(~scanf("%d",&n)){
        if(n==0)
            break;
        for(int i=0;i<n;i++)
            for(int it=0;it<3;it++)
                for(int j=0;j<n;j++)
                    for(int jt=0;jt<3;jt++){
                        G[i][it][j][jt]=0;
                    }
        for(int i=0;i<n;i++){
            int a,b,c;
            scanf("%d%d%d",&a,&b,&c);
            if(b>a)
                swap1(a,b);
            if(c>a)
                swap1(a,c);
            if(c>b)
                swap1(b,c);
            d[i][0]=a;
            d[i][1]=b;
            d[i][2]=c;
            //printf("%d,%d,%d\n",a,b,c);
        }
        for(int i=0;i<n;i++){
            for(int it=0;it<3;it++){
                for(int j=0;j<n;j++){
                    for(int jt=0;jt<3;jt++){
                        int a1,b1,a2,b2;
                        a1=b1=a2=b2=-1;
                        for(int k=0;k<3;k++){
                            if(it!=k){
                                if(a1==-1)
                                    a1=k;
                                else
                                    b1=k;
                            }
                            if(jt!=k){
                                if(a2==-1)
                                    a2=k;
                                else
                                    b2=k;
                            }
                        }
                        if(d[i][a1]>d[j][a2]&&d[i][b1]>d[j][b2]){
                            G[i][it][j][jt]=1;
                            //
                        }
                        else
                        {
                            if(d[i][a1]<d[j][a2]&&d[i][b1]<d[j][b2])
                            {
                                G[j][jt][i][it]=1;
                                //printf("%d,%d,%d,%d\n",i,it,j,jt);
                            }


                        }
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int k=0;k<3;k++){
                dp[i][k]=0;
            }
        }
        ans=0;
        for(int i=0;i<n;i++)
        for(int k=0;k<3;k++){
            ans=max(ans,DAGdp(i,k));
        }
        printf("Case %d: maximum height = %d\n",++t,ans);
    }
    return 0;
}
